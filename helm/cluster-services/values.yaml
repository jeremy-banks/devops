.anchors:
  clusterName: &clusterName sdlc-dev-green
  region: &region us-west-2
  clusterAutoscaler: &clusterAutoscaler cluster-autoscaler
  podReplicaCount: &podReplicaCount 2
  acmArnPrimary: &acmArnPrimary "arn:aws:acm:us-west-2:615299741042:certificate/8b5157dd-0e0e-453a-bb85-776fbfa294d7"
  acmArnFailover: &acmArnFailover "bar"

cluster-autoscaler:
  autoDiscovery:
    clusterName: *clusterName
  cloudProvider: aws
  awsRegion: *region
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: role
            operator: In
            values:
            - *clusterAutoscaler
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - *clusterAutoscaler
        topologyKey: "topology.kubernetes.io/zone"
  tolerations:
    - key: "role"
      operator: "Equal"
      value: *clusterAutoscaler
      effect: "NoSchedule"
  rbac:
    serviceAccount:
      create: false
      name: *clusterAutoscaler
  replicaCount: *podReplicaCount

aws-ebs-csi-driver:
  controller.region: *region
  controller.affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app: ebs-csi-controller
          topologyKey: "kubernetes.io/zone"
  controller.serviceAccount:
    create: false
    name: aws-ebs-csi-controller
  enableVolumeResizing: true
  node.tolerateAllTaints: true

# external-dns:
#   provider:
#     name: aws
#   env:
#   - name: AWS_DEFAULT_REGION
#     value: *region

# cert-manager:

aws-load-balancer-controller:
  clusterName: *clusterName
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - aws-load-balancer-controller
        topologyKey: "topology.kubernetes.io/zone"
  rbac:
    serviceAccount:
      create: false
      name: aws-load-balancer-controller
  replicaCount: *podReplicaCount
  service:
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-internal: "false"
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: *acmArnPrimary
      service.beta.kubernetes.io/aws-load-balancer-ssl-redirect: "443"
  servicePort: 80
  ingress:
    enabled: true
    className: alb
    annotations:
      kubernetes.io/ingress.class: "alb"
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/certificate-arn: *acmArnPrimary
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/target-group-attributes: "stickiness.enabled=true,stickiness.type=source"
      alb.ingress.kubernetes.io/healthcheck-path: "/"
      alb.ingress.kubernetes.io/healthcheck-interval: "30"
      alb.ingress.kubernetes.io/healthcheck-timeout: "5"
      alb.ingress.kubernetes.io/healthcheck-healthy-threshold: "3"
      alb.ingress.kubernetes.io/healthcheck-unhealthy-threshold: "3"